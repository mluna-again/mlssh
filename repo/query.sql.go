// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repo

import (
	"context"
	"database/sql"
)

const createSettings = `-- name: CreateSettings :one
INSERT INTO settings (
  user_pk,
  pet_species,
  pet_color,
  pet_name,
  inserted_at
) VALUES (?, ?, ?, ?, UNIXEPOCH())
RETURNING user_pk, pet_species, pet_color, inserted_at, pet_name
`

type CreateSettingsParams struct {
	UserPk     string
	PetSpecies string
	PetColor   sql.NullString
	PetName    string
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSettings,
		arg.UserPk,
		arg.PetSpecies,
		arg.PetColor,
		arg.PetName,
	)
	var i Setting
	err := row.Scan(
		&i.UserPk,
		&i.PetSpecies,
		&i.PetColor,
		&i.InsertedAt,
		&i.PetName,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, public_key) VALUES (?, ?)
RETURNING public_key, name, next_activity_change_at
`

type CreateUserParams struct {
	Name      string
	PublicKey string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.PublicKey)
	var i User
	err := row.Scan(&i.PublicKey, &i.Name, &i.NextActivityChangeAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT public_key, name, next_activity_change_at, user_pk, pet_species, pet_color, inserted_at, pet_name FROM users
LEFT JOIN settings ON settings.user_pk = users.public_key
WHERE public_key = ?
LIMIT 1
`

type GetUserRow struct {
	PublicKey            string
	Name                 string
	NextActivityChangeAt int64
	UserPk               sql.NullString
	PetSpecies           sql.NullString
	PetColor             sql.NullString
	InsertedAt           sql.NullInt64
	PetName              sql.NullString
}

func (q *Queries) GetUser(ctx context.Context, publicKey string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, publicKey)
	var i GetUserRow
	err := row.Scan(
		&i.PublicKey,
		&i.Name,
		&i.NextActivityChangeAt,
		&i.UserPk,
		&i.PetSpecies,
		&i.PetColor,
		&i.InsertedAt,
		&i.PetName,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = COALESCE(?, name), next_activity_change_at = COALESCE(?, next_activity_change_at)
RETURNING public_key, name, next_activity_change_at
`

type UpdateUserParams struct {
	Name                 string
	NextActivityChangeAt int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Name, arg.NextActivityChangeAt)
	var i User
	err := row.Scan(&i.PublicKey, &i.Name, &i.NextActivityChangeAt)
	return i, err
}
